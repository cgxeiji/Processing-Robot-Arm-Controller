/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void slider2dXY_change1(GSlider2D source, GEvent event) { //_CODE_:slider2dXY:587720:
  x = source.getValueXF();
  y = source.getValueYF();
  
  slider2dXZ.setValueX(x);
  
  send("G01 X" + x + " Y" + y + " Z" + z + " F100");
} //_CODE_:slider2dXY:587720:

public void slider2dXZ_change1(GSlider2D source, GEvent event) { //_CODE_:slider2dXZ:951220:
  x = source.getValueXF();
  z = source.getValueYF();
  
  slider2dXY.setValueX(x);
  
  send("G01 X" + x + " Y" + y + " Z" + z + " F100");
} //_CODE_:slider2dXZ:951220:

public void dlPorts_click1(GDropList source, GEvent event) { //_CODE_:dlPorts:522580:
  println("dlPorts - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:dlPorts:522580:

public void bConnect_click1(GButton source, GEvent event) { //_CODE_:bConnect:427343:
if (!isConnected) {
    serialConnect();
  } else {
    serialDisconnect();
  }
} //_CODE_:bConnect:427343:

public void kAttack_turn1(GKnob source, GEvent event) { //_CODE_:kAttack:927495:
  lAttack.setText("Attack Angle: " + nfs(kAttack.getValueF(), 2, 1));
  send("G01 X" + x + " Y" + y + " Z" + z + " W" + kAttack.getValueF() + " F100");
} //_CODE_:kAttack:927495:

public void cbAttack_clicked1(GCheckbox source, GEvent event) { //_CODE_:cbAttack:710322:
  if (cbAttack.isSelected()) {
    cbAttack.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    kAttack.setLocalColorScheme(GCScheme.RED_SCHEME);
    lAttack.setLocalColorScheme(GCScheme.RED_SCHEME);
    kAttack.setEnabled(false);
    lAttack.setEnabled(false);
    send("G01 X" + x + " Y" + y + " Z" + z + " W" + 999.9 + " F100");
  } else {
    cbAttack.setLocalColorScheme(GCScheme.RED_SCHEME);
    kAttack.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    lAttack.setLocalColorScheme(GCScheme.GREEN_SCHEME);
    kAttack.setEnabled(true);
    lAttack.setEnabled(true);
    send("G01 X" + x + " Y" + y + " Z" + z + " W" + (-kAttack.getValueF()) + " F100");
  }
} //_CODE_:cbAttack:710322:

public void kBase_turn1(GKnob source, GEvent event) { //_CODE_:kBase:713256:
  
  if (source == kBase) {
    lBase.setText("Base " + nf(kBase.getValueF(), 3, 2));
  }
} //_CODE_:kBase:713256:

public void b90_click1(GButton source, GEvent event) { //_CODE_:b90:200019:
  angles[0] = 90;
  angles[1] = 90;
  angles[2] = 90;
  angles[3] = 90;
  angles[4] = 90;
  send("M105");
} //_CODE_:b90:200019:

public void kWrist_turn1(GKnob source, GEvent event) { //_CODE_:kWrist:376624:
  println("kWrist - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:kWrist:376624:

public void kElbow_turn1(GKnob source, GEvent event) { //_CODE_:kElbow:971784:
  println("kElbow - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:kElbow:971784:

public void kShoulder_turn1(GKnob source, GEvent event) { //_CODE_:kShoulder:598142:
  println("kShoulder - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:kShoulder:598142:

public void kHand_turn1(GKnob source, GEvent event) { //_CODE_:kHand:608494:
  println("kHand - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:kHand:608494:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Arm Controller");
  slider2dXY = new GSlider2D(this, 700, 400, 300, 300);
  slider2dXY.setLimitsX(190.0, -400.0, 400.0);
  slider2dXY.setLimitsY(400.0, 400.0, -400.0);
  slider2dXY.setNumberFormat(G4P.DECIMAL, 2);
  slider2dXY.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  slider2dXY.setOpaque(false);
  slider2dXY.addEventHandler(this, "slider2dXY_change1");
  slider2dXZ = new GSlider2D(this, 700, 80, 300, 300);
  slider2dXZ.setLimitsX(1.0, -400.0, 400.0);
  slider2dXZ.setLimitsY(40.0, 400.0, -200.0);
  slider2dXZ.setNumberFormat(G4P.DECIMAL, 2);
  slider2dXZ.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  slider2dXZ.setOpaque(false);
  slider2dXZ.addEventHandler(this, "slider2dXZ_change1");
  lCurrentPosition = new GLabel(this, 10, 10, 670, 40);
  lCurrentPosition.setTextAlign(GAlign.LEFT, GAlign.TOP);
  lCurrentPosition.setText("[Current]");
  lCurrentPosition.setTextBold();
  lCurrentPosition.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  lCurrentPosition.setOpaque(false);
  dlPorts = new GDropList(this, 700, 10, 90, 80, 3);
  dlPorts.setItems(loadStrings("list_522580"), 0);
  dlPorts.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  dlPorts.addEventHandler(this, "dlPorts_click1");
  bConnect = new GButton(this, 850, 10, 80, 20);
  bConnect.setText("Connect");
  bConnect.setTextBold();
  bConnect.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  bConnect.addEventHandler(this, "bConnect_click1");
  lGoalPosition = new GLabel(this, 10, 50, 670, 40);
  lGoalPosition.setTextAlign(GAlign.LEFT, GAlign.TOP);
  lGoalPosition.setText("[Goal]");
  lGoalPosition.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  lGoalPosition.setOpaque(false);
  kAttack = new GKnob(this, 10, 120, 100, 100, 0.8);
  kAttack.setTurnRange(270, 90);
  kAttack.setTurnMode(GKnob.CTRL_ANGULAR);
  kAttack.setShowArcOnly(false);
  kAttack.setOverArcOnly(false);
  kAttack.setIncludeOverBezel(false);
  kAttack.setShowTrack(false);
  kAttack.setLimits(-45.0, 90.0, -90.0);
  kAttack.setNbrTicks(38);
  kAttack.setShowTicks(true);
  kAttack.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  kAttack.setOpaque(false);
  kAttack.addEventHandler(this, "kAttack_turn1");
  lAttack = new GLabel(this, 10, 220, 200, 20);
  lAttack.setText("Attack Angle:");
  lAttack.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  lAttack.setOpaque(false);
  cbAttack = new GCheckbox(this, 10, 240, 183, 20);
  cbAttack.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  cbAttack.setText("Free Attack Angle?");
  cbAttack.setTextBold();
  cbAttack.setLocalColorScheme(GCScheme.RED_SCHEME);
  cbAttack.setOpaque(false);
  cbAttack.addEventHandler(this, "cbAttack_clicked1");
  kBase = new GKnob(this, 420, 620, 60, 60, 0.8);
  kBase.setTurnRange(180, 0);
  kBase.setTurnMode(GKnob.CTRL_HORIZONTAL);
  kBase.setSensitivity(1);
  kBase.setShowArcOnly(true);
  kBase.setOverArcOnly(false);
  kBase.setIncludeOverBezel(false);
  kBase.setShowTrack(false);
  kBase.setLimits(90.0, 180.0, 0.0);
  kBase.setNbrTicks(20);
  kBase.setShowTicks(true);
  kBase.setLocalColorScheme(GCScheme.RED_SCHEME);
  kBase.setOpaque(false);
  kBase.addEventHandler(this, "kBase_turn1");
  lBase = new GLabel(this, 420, 650, 60, 40);
  lBase.setTextAlign(GAlign.CENTER, GAlign.TOP);
  lBase.setText("Base");
  lBase.setLocalColorScheme(GCScheme.RED_SCHEME);
  lBase.setOpaque(false);
  b90 = new GButton(this, 594, 661, 80, 30);
  b90.setText("Calibrate [_]");
  b90.setTextBold();
  b90.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  b90.addEventHandler(this, "b90_click1");
  label1 = new GLabel(this, 90, 270, 400, 400);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setOpaque(false);
  kWrist = new GKnob(this, 153, 325, 60, 60, 0.8);
  kWrist.setTurnRange(180, 0);
  kWrist.setTurnMode(GKnob.CTRL_HORIZONTAL);
  kWrist.setSensitivity(1);
  kWrist.setShowArcOnly(true);
  kWrist.setOverArcOnly(false);
  kWrist.setIncludeOverBezel(false);
  kWrist.setShowTrack(false);
  kWrist.setLimits(90.0, 180.0, 0.0);
  kWrist.setNbrTicks(20);
  kWrist.setShowTicks(true);
  kWrist.setLocalColorScheme(GCScheme.RED_SCHEME);
  kWrist.setOpaque(false);
  kWrist.addEventHandler(this, "kWrist_turn1");
  kElbow = new GKnob(this, 422, 380, 60, 60, 0.8);
  kElbow.setTurnRange(180, 0);
  kElbow.setTurnMode(GKnob.CTRL_HORIZONTAL);
  kElbow.setSensitivity(1);
  kElbow.setShowArcOnly(true);
  kElbow.setOverArcOnly(false);
  kElbow.setIncludeOverBezel(false);
  kElbow.setShowTrack(false);
  kElbow.setLimits(90.0, 180.0, 0.0);
  kElbow.setNbrTicks(20);
  kElbow.setShowTicks(true);
  kElbow.setLocalColorScheme(GCScheme.RED_SCHEME);
  kElbow.setOpaque(false);
  kElbow.addEventHandler(this, "kElbow_turn1");
  kShoulder = new GKnob(this, 420, 493, 60, 60, 0.8);
  kShoulder.setTurnRange(195, 345);
  kShoulder.setTurnMode(GKnob.CTRL_HORIZONTAL);
  kShoulder.setSensitivity(1);
  kShoulder.setShowArcOnly(true);
  kShoulder.setOverArcOnly(false);
  kShoulder.setIncludeOverBezel(false);
  kShoulder.setShowTrack(false);
  kShoulder.setLimits(90.0, 165.0, 15.0);
  kShoulder.setNbrTicks(20);
  kShoulder.setShowTicks(true);
  kShoulder.setLocalColorScheme(GCScheme.RED_SCHEME);
  kShoulder.setOpaque(false);
  kShoulder.addEventHandler(this, "kShoulder_turn1");
  kHand = new GKnob(this, 111, 449, 60, 60, 0.8);
  kHand.setTurnRange(180, 0);
  kHand.setTurnMode(GKnob.CTRL_HORIZONTAL);
  kHand.setSensitivity(1);
  kHand.setShowArcOnly(true);
  kHand.setOverArcOnly(false);
  kHand.setIncludeOverBezel(false);
  kHand.setShowTrack(false);
  kHand.setLimits(90.0, 180.0, 0.0);
  kHand.setNbrTicks(20);
  kHand.setShowTicks(true);
  kHand.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  kHand.setOpaque(false);
  kHand.addEventHandler(this, "kHand_turn1");
}

// Variable declarations 
// autogenerated do not edit
GSlider2D slider2dXY; 
GSlider2D slider2dXZ; 
GLabel lCurrentPosition; 
GDropList dlPorts; 
GButton bConnect; 
GLabel lGoalPosition; 
GKnob kAttack; 
GLabel lAttack; 
GCheckbox cbAttack; 
GKnob kBase; 
GLabel lBase; 
GButton b90; 
GLabel label1; 
GKnob kWrist; 
GKnob kElbow; 
GKnob kShoulder; 
GKnob kHand; 